// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i pvz-cli/internal/usecase.OrderCache -o order_cache_mock.go -n OrderCacheMock -p mock

import (
	"pvz-cli/internal/domain/models"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderCacheMock implements mm_usecase.OrderCache
type OrderCacheMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcDelete          func(id string)
	funcDeleteOrigin    string
	inspectFuncDelete   func(id string)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mOrderCacheMockDelete

	funcGet          func(id string) (op1 *models.Order, b1 bool)
	funcGetOrigin    string
	inspectFuncGet   func(id string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mOrderCacheMockGet

	funcSet          func(id string, ord *models.Order)
	funcSetOrigin    string
	inspectFuncSet   func(id string, ord *models.Order)
	afterSetCounter  uint64
	beforeSetCounter uint64
	SetMock          mOrderCacheMockSet
}

// NewOrderCacheMock returns a mock for mm_usecase.OrderCache
func NewOrderCacheMock(t minimock.Tester) *OrderCacheMock {
	m := &OrderCacheMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.DeleteMock = mOrderCacheMockDelete{mock: m}
	m.DeleteMock.callArgs = []*OrderCacheMockDeleteParams{}

	m.GetMock = mOrderCacheMockGet{mock: m}
	m.GetMock.callArgs = []*OrderCacheMockGetParams{}

	m.SetMock = mOrderCacheMockSet{mock: m}
	m.SetMock.callArgs = []*OrderCacheMockSetParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOrderCacheMockDelete struct {
	optional           bool
	mock               *OrderCacheMock
	defaultExpectation *OrderCacheMockDeleteExpectation
	expectations       []*OrderCacheMockDeleteExpectation

	callArgs []*OrderCacheMockDeleteParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderCacheMockDeleteExpectation specifies expectation struct of the OrderCache.Delete
type OrderCacheMockDeleteExpectation struct {
	mock               *OrderCacheMock
	params             *OrderCacheMockDeleteParams
	paramPtrs          *OrderCacheMockDeleteParamPtrs
	expectationOrigins OrderCacheMockDeleteExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// OrderCacheMockDeleteParams contains parameters of the OrderCache.Delete
type OrderCacheMockDeleteParams struct {
	id string
}

// OrderCacheMockDeleteParamPtrs contains pointers to parameters of the OrderCache.Delete
type OrderCacheMockDeleteParamPtrs struct {
	id *string
}

// OrderCacheMockDeleteOrigins contains origins of expectations of the OrderCache.Delete
type OrderCacheMockDeleteExpectationOrigins struct {
	origin   string
	originId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmDelete *mOrderCacheMockDelete) Optional() *mOrderCacheMockDelete {
	mmDelete.optional = true
	return mmDelete
}

// Expect sets up expected params for OrderCache.Delete
func (mmDelete *mOrderCacheMockDelete) Expect(id string) *mOrderCacheMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &OrderCacheMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.paramPtrs != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by ExpectParams functions")
	}

	mmDelete.defaultExpectation.params = &OrderCacheMockDeleteParams{id}
	mmDelete.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// ExpectIdParam1 sets up expected param id for OrderCache.Delete
func (mmDelete *mOrderCacheMockDelete) ExpectIdParam1(id string) *mOrderCacheMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &OrderCacheMockDeleteExpectation{}
	}

	if mmDelete.defaultExpectation.params != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by Expect")
	}

	if mmDelete.defaultExpectation.paramPtrs == nil {
		mmDelete.defaultExpectation.paramPtrs = &OrderCacheMockDeleteParamPtrs{}
	}
	mmDelete.defaultExpectation.paramPtrs.id = &id
	mmDelete.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the OrderCache.Delete
func (mmDelete *mOrderCacheMockDelete) Inspect(f func(id string)) *mOrderCacheMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for OrderCacheMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by OrderCache.Delete
func (mmDelete *mOrderCacheMockDelete) Return() *OrderCacheMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &OrderCacheMockDeleteExpectation{mock: mmDelete.mock}
	}

	mmDelete.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// Set uses given function f to mock the OrderCache.Delete method
func (mmDelete *mOrderCacheMockDelete) Set(f func(id string)) *OrderCacheMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the OrderCache.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the OrderCache.Delete method")
	}

	mmDelete.mock.funcDelete = f
	mmDelete.mock.funcDeleteOrigin = minimock.CallerInfo(1)
	return mmDelete.mock
}

// When sets expectation for the OrderCache.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mOrderCacheMockDelete) When(id string) *OrderCacheMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("OrderCacheMock.Delete mock is already set by Set")
	}

	expectation := &OrderCacheMockDeleteExpectation{
		mock:               mmDelete.mock,
		params:             &OrderCacheMockDeleteParams{id},
		expectationOrigins: OrderCacheMockDeleteExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up OrderCache.Delete return parameters for the expectation previously defined by the When method

func (e *OrderCacheMockDeleteExpectation) Then() *OrderCacheMock {
	return e.mock
}

// Times sets number of times OrderCache.Delete should be invoked
func (mmDelete *mOrderCacheMockDelete) Times(n uint64) *mOrderCacheMockDelete {
	if n == 0 {
		mmDelete.mock.t.Fatalf("Times of OrderCacheMock.Delete mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmDelete.expectedInvocations, n)
	mmDelete.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmDelete
}

func (mmDelete *mOrderCacheMockDelete) invocationsDone() bool {
	if len(mmDelete.expectations) == 0 && mmDelete.defaultExpectation == nil && mmDelete.mock.funcDelete == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmDelete.mock.afterDeleteCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmDelete.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Delete implements mm_usecase.OrderCache
func (mmDelete *OrderCacheMock) Delete(id string) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	mmDelete.t.Helper()

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(id)
	}

	mm_params := OrderCacheMockDeleteParams{id}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, &mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_want_ptrs := mmDelete.DeleteMock.defaultExpectation.paramPtrs

		mm_got := OrderCacheMockDeleteParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmDelete.t.Errorf("OrderCacheMock.Delete got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmDelete.DeleteMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("OrderCacheMock.Delete got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmDelete.DeleteMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmDelete.funcDelete != nil {
		mmDelete.funcDelete(id)
		return
	}
	mmDelete.t.Fatalf("Unexpected call to OrderCacheMock.Delete. %v", id)

}

// DeleteAfterCounter returns a count of finished OrderCacheMock.Delete invocations
func (mmDelete *OrderCacheMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of OrderCacheMock.Delete invocations
func (mmDelete *OrderCacheMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to OrderCacheMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mOrderCacheMockDelete) Calls() []*OrderCacheMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*OrderCacheMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *OrderCacheMock) MinimockDeleteDone() bool {
	if m.DeleteMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.DeleteMock.invocationsDone()
}

// MinimockDeleteInspect logs each unmet expectation
func (m *OrderCacheMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCacheMock.Delete at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterDeleteCounter := mm_atomic.LoadUint64(&m.afterDeleteCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && afterDeleteCounter < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderCacheMock.Delete at\n%s", m.DeleteMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderCacheMock.Delete at\n%s with params: %#v", m.DeleteMock.defaultExpectation.expectationOrigins.origin, *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && afterDeleteCounter < 1 {
		m.t.Errorf("Expected call to OrderCacheMock.Delete at\n%s", m.funcDeleteOrigin)
	}

	if !m.DeleteMock.invocationsDone() && afterDeleteCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderCacheMock.Delete at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.DeleteMock.expectedInvocations), m.DeleteMock.expectedInvocationsOrigin, afterDeleteCounter)
	}
}

type mOrderCacheMockGet struct {
	optional           bool
	mock               *OrderCacheMock
	defaultExpectation *OrderCacheMockGetExpectation
	expectations       []*OrderCacheMockGetExpectation

	callArgs []*OrderCacheMockGetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderCacheMockGetExpectation specifies expectation struct of the OrderCache.Get
type OrderCacheMockGetExpectation struct {
	mock               *OrderCacheMock
	params             *OrderCacheMockGetParams
	paramPtrs          *OrderCacheMockGetParamPtrs
	expectationOrigins OrderCacheMockGetExpectationOrigins
	results            *OrderCacheMockGetResults
	returnOrigin       string
	Counter            uint64
}

// OrderCacheMockGetParams contains parameters of the OrderCache.Get
type OrderCacheMockGetParams struct {
	id string
}

// OrderCacheMockGetParamPtrs contains pointers to parameters of the OrderCache.Get
type OrderCacheMockGetParamPtrs struct {
	id *string
}

// OrderCacheMockGetResults contains results of the OrderCache.Get
type OrderCacheMockGetResults struct {
	op1 *models.Order
	b1  bool
}

// OrderCacheMockGetOrigins contains origins of expectations of the OrderCache.Get
type OrderCacheMockGetExpectationOrigins struct {
	origin   string
	originId string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGet *mOrderCacheMockGet) Optional() *mOrderCacheMockGet {
	mmGet.optional = true
	return mmGet
}

// Expect sets up expected params for OrderCache.Get
func (mmGet *mOrderCacheMockGet) Expect(id string) *mOrderCacheMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheMockGetExpectation{}
	}

	if mmGet.defaultExpectation.paramPtrs != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by ExpectParams functions")
	}

	mmGet.defaultExpectation.params = &OrderCacheMockGetParams{id}
	mmGet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// ExpectIdParam1 sets up expected param id for OrderCache.Get
func (mmGet *mOrderCacheMockGet) ExpectIdParam1(id string) *mOrderCacheMockGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheMockGetExpectation{}
	}

	if mmGet.defaultExpectation.params != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by Expect")
	}

	if mmGet.defaultExpectation.paramPtrs == nil {
		mmGet.defaultExpectation.paramPtrs = &OrderCacheMockGetParamPtrs{}
	}
	mmGet.defaultExpectation.paramPtrs.id = &id
	mmGet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the OrderCache.Get
func (mmGet *mOrderCacheMockGet) Inspect(f func(id string)) *mOrderCacheMockGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for OrderCacheMock.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by OrderCache.Get
func (mmGet *mOrderCacheMockGet) Return(op1 *models.Order, b1 bool) *OrderCacheMock {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &OrderCacheMockGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &OrderCacheMockGetResults{op1, b1}
	mmGet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// Set uses given function f to mock the OrderCache.Get method
func (mmGet *mOrderCacheMockGet) Set(f func(id string) (op1 *models.Order, b1 bool)) *OrderCacheMock {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the OrderCache.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the OrderCache.Get method")
	}

	mmGet.mock.funcGet = f
	mmGet.mock.funcGetOrigin = minimock.CallerInfo(1)
	return mmGet.mock
}

// When sets expectation for the OrderCache.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mOrderCacheMockGet) When(id string) *OrderCacheMockGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("OrderCacheMock.Get mock is already set by Set")
	}

	expectation := &OrderCacheMockGetExpectation{
		mock:               mmGet.mock,
		params:             &OrderCacheMockGetParams{id},
		expectationOrigins: OrderCacheMockGetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up OrderCache.Get return parameters for the expectation previously defined by the When method
func (e *OrderCacheMockGetExpectation) Then(op1 *models.Order, b1 bool) *OrderCacheMock {
	e.results = &OrderCacheMockGetResults{op1, b1}
	return e.mock
}

// Times sets number of times OrderCache.Get should be invoked
func (mmGet *mOrderCacheMockGet) Times(n uint64) *mOrderCacheMockGet {
	if n == 0 {
		mmGet.mock.t.Fatalf("Times of OrderCacheMock.Get mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGet.expectedInvocations, n)
	mmGet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGet
}

func (mmGet *mOrderCacheMockGet) invocationsDone() bool {
	if len(mmGet.expectations) == 0 && mmGet.defaultExpectation == nil && mmGet.mock.funcGet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGet.mock.afterGetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Get implements mm_usecase.OrderCache
func (mmGet *OrderCacheMock) Get(id string) (op1 *models.Order, b1 bool) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	mmGet.t.Helper()

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(id)
	}

	mm_params := OrderCacheMockGetParams{id}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, &mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.b1
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_want_ptrs := mmGet.GetMock.defaultExpectation.paramPtrs

		mm_got := OrderCacheMockGetParams{id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGet.t.Errorf("OrderCacheMock.Get got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGet.GetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("OrderCacheMock.Get got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGet.GetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the OrderCacheMock.Get")
		}
		return (*mm_results).op1, (*mm_results).b1
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(id)
	}
	mmGet.t.Fatalf("Unexpected call to OrderCacheMock.Get. %v", id)
	return
}

// GetAfterCounter returns a count of finished OrderCacheMock.Get invocations
func (mmGet *OrderCacheMock) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of OrderCacheMock.Get invocations
func (mmGet *OrderCacheMock) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to OrderCacheMock.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mOrderCacheMockGet) Calls() []*OrderCacheMockGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*OrderCacheMockGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *OrderCacheMock) MinimockGetDone() bool {
	if m.GetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetMock.invocationsDone()
}

// MinimockGetInspect logs each unmet expectation
func (m *OrderCacheMock) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCacheMock.Get at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetCounter := mm_atomic.LoadUint64(&m.afterGetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && afterGetCounter < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderCacheMock.Get at\n%s", m.GetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderCacheMock.Get at\n%s with params: %#v", m.GetMock.defaultExpectation.expectationOrigins.origin, *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && afterGetCounter < 1 {
		m.t.Errorf("Expected call to OrderCacheMock.Get at\n%s", m.funcGetOrigin)
	}

	if !m.GetMock.invocationsDone() && afterGetCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderCacheMock.Get at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetMock.expectedInvocations), m.GetMock.expectedInvocationsOrigin, afterGetCounter)
	}
}

type mOrderCacheMockSet struct {
	optional           bool
	mock               *OrderCacheMock
	defaultExpectation *OrderCacheMockSetExpectation
	expectations       []*OrderCacheMockSetExpectation

	callArgs []*OrderCacheMockSetParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OrderCacheMockSetExpectation specifies expectation struct of the OrderCache.Set
type OrderCacheMockSetExpectation struct {
	mock               *OrderCacheMock
	params             *OrderCacheMockSetParams
	paramPtrs          *OrderCacheMockSetParamPtrs
	expectationOrigins OrderCacheMockSetExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// OrderCacheMockSetParams contains parameters of the OrderCache.Set
type OrderCacheMockSetParams struct {
	id  string
	ord *models.Order
}

// OrderCacheMockSetParamPtrs contains pointers to parameters of the OrderCache.Set
type OrderCacheMockSetParamPtrs struct {
	id  *string
	ord **models.Order
}

// OrderCacheMockSetOrigins contains origins of expectations of the OrderCache.Set
type OrderCacheMockSetExpectationOrigins struct {
	origin    string
	originId  string
	originOrd string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSet *mOrderCacheMockSet) Optional() *mOrderCacheMockSet {
	mmSet.optional = true
	return mmSet
}

// Expect sets up expected params for OrderCache.Set
func (mmSet *mOrderCacheMockSet) Expect(id string, ord *models.Order) *mOrderCacheMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheMockSetExpectation{}
	}

	if mmSet.defaultExpectation.paramPtrs != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by ExpectParams functions")
	}

	mmSet.defaultExpectation.params = &OrderCacheMockSetParams{id, ord}
	mmSet.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSet.expectations {
		if minimock.Equal(e.params, mmSet.defaultExpectation.params) {
			mmSet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSet.defaultExpectation.params)
		}
	}

	return mmSet
}

// ExpectIdParam1 sets up expected param id for OrderCache.Set
func (mmSet *mOrderCacheMockSet) ExpectIdParam1(id string) *mOrderCacheMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &OrderCacheMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.id = &id
	mmSet.defaultExpectation.expectationOrigins.originId = minimock.CallerInfo(1)

	return mmSet
}

// ExpectOrdParam2 sets up expected param ord for OrderCache.Set
func (mmSet *mOrderCacheMockSet) ExpectOrdParam2(ord *models.Order) *mOrderCacheMockSet {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheMockSetExpectation{}
	}

	if mmSet.defaultExpectation.params != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Expect")
	}

	if mmSet.defaultExpectation.paramPtrs == nil {
		mmSet.defaultExpectation.paramPtrs = &OrderCacheMockSetParamPtrs{}
	}
	mmSet.defaultExpectation.paramPtrs.ord = &ord
	mmSet.defaultExpectation.expectationOrigins.originOrd = minimock.CallerInfo(1)

	return mmSet
}

// Inspect accepts an inspector function that has same arguments as the OrderCache.Set
func (mmSet *mOrderCacheMockSet) Inspect(f func(id string, ord *models.Order)) *mOrderCacheMockSet {
	if mmSet.mock.inspectFuncSet != nil {
		mmSet.mock.t.Fatalf("Inspect function is already set for OrderCacheMock.Set")
	}

	mmSet.mock.inspectFuncSet = f

	return mmSet
}

// Return sets up results that will be returned by OrderCache.Set
func (mmSet *mOrderCacheMockSet) Return() *OrderCacheMock {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Set")
	}

	if mmSet.defaultExpectation == nil {
		mmSet.defaultExpectation = &OrderCacheMockSetExpectation{mock: mmSet.mock}
	}

	mmSet.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// Set uses given function f to mock the OrderCache.Set method
func (mmSet *mOrderCacheMockSet) Set(f func(id string, ord *models.Order)) *OrderCacheMock {
	if mmSet.defaultExpectation != nil {
		mmSet.mock.t.Fatalf("Default expectation is already set for the OrderCache.Set method")
	}

	if len(mmSet.expectations) > 0 {
		mmSet.mock.t.Fatalf("Some expectations are already set for the OrderCache.Set method")
	}

	mmSet.mock.funcSet = f
	mmSet.mock.funcSetOrigin = minimock.CallerInfo(1)
	return mmSet.mock
}

// When sets expectation for the OrderCache.Set which will trigger the result defined by the following
// Then helper
func (mmSet *mOrderCacheMockSet) When(id string, ord *models.Order) *OrderCacheMockSetExpectation {
	if mmSet.mock.funcSet != nil {
		mmSet.mock.t.Fatalf("OrderCacheMock.Set mock is already set by Set")
	}

	expectation := &OrderCacheMockSetExpectation{
		mock:               mmSet.mock,
		params:             &OrderCacheMockSetParams{id, ord},
		expectationOrigins: OrderCacheMockSetExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSet.expectations = append(mmSet.expectations, expectation)
	return expectation
}

// Then sets up OrderCache.Set return parameters for the expectation previously defined by the When method

func (e *OrderCacheMockSetExpectation) Then() *OrderCacheMock {
	return e.mock
}

// Times sets number of times OrderCache.Set should be invoked
func (mmSet *mOrderCacheMockSet) Times(n uint64) *mOrderCacheMockSet {
	if n == 0 {
		mmSet.mock.t.Fatalf("Times of OrderCacheMock.Set mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSet.expectedInvocations, n)
	mmSet.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSet
}

func (mmSet *mOrderCacheMockSet) invocationsDone() bool {
	if len(mmSet.expectations) == 0 && mmSet.defaultExpectation == nil && mmSet.mock.funcSet == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSet.mock.afterSetCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSet.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Set implements mm_usecase.OrderCache
func (mmSet *OrderCacheMock) Set(id string, ord *models.Order) {
	mm_atomic.AddUint64(&mmSet.beforeSetCounter, 1)
	defer mm_atomic.AddUint64(&mmSet.afterSetCounter, 1)

	mmSet.t.Helper()

	if mmSet.inspectFuncSet != nil {
		mmSet.inspectFuncSet(id, ord)
	}

	mm_params := OrderCacheMockSetParams{id, ord}

	// Record call args
	mmSet.SetMock.mutex.Lock()
	mmSet.SetMock.callArgs = append(mmSet.SetMock.callArgs, &mm_params)
	mmSet.SetMock.mutex.Unlock()

	for _, e := range mmSet.SetMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmSet.SetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSet.SetMock.defaultExpectation.Counter, 1)
		mm_want := mmSet.SetMock.defaultExpectation.params
		mm_want_ptrs := mmSet.SetMock.defaultExpectation.paramPtrs

		mm_got := OrderCacheMockSetParams{id, ord}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmSet.t.Errorf("OrderCacheMock.Set got unexpected parameter id, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originId, *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

			if mm_want_ptrs.ord != nil && !minimock.Equal(*mm_want_ptrs.ord, mm_got.ord) {
				mmSet.t.Errorf("OrderCacheMock.Set got unexpected parameter ord, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSet.SetMock.defaultExpectation.expectationOrigins.originOrd, *mm_want_ptrs.ord, mm_got.ord, minimock.Diff(*mm_want_ptrs.ord, mm_got.ord))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSet.t.Errorf("OrderCacheMock.Set got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSet.SetMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmSet.funcSet != nil {
		mmSet.funcSet(id, ord)
		return
	}
	mmSet.t.Fatalf("Unexpected call to OrderCacheMock.Set. %v %v", id, ord)

}

// SetAfterCounter returns a count of finished OrderCacheMock.Set invocations
func (mmSet *OrderCacheMock) SetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.afterSetCounter)
}

// SetBeforeCounter returns a count of OrderCacheMock.Set invocations
func (mmSet *OrderCacheMock) SetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSet.beforeSetCounter)
}

// Calls returns a list of arguments used in each call to OrderCacheMock.Set.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSet *mOrderCacheMockSet) Calls() []*OrderCacheMockSetParams {
	mmSet.mutex.RLock()

	argCopy := make([]*OrderCacheMockSetParams, len(mmSet.callArgs))
	copy(argCopy, mmSet.callArgs)

	mmSet.mutex.RUnlock()

	return argCopy
}

// MinimockSetDone returns true if the count of the Set invocations corresponds
// the number of defined expectations
func (m *OrderCacheMock) MinimockSetDone() bool {
	if m.SetMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetMock.invocationsDone()
}

// MinimockSetInspect logs each unmet expectation
func (m *OrderCacheMock) MinimockSetInspect() {
	for _, e := range m.SetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderCacheMock.Set at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetCounter := mm_atomic.LoadUint64(&m.afterSetCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetMock.defaultExpectation != nil && afterSetCounter < 1 {
		if m.SetMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OrderCacheMock.Set at\n%s", m.SetMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OrderCacheMock.Set at\n%s with params: %#v", m.SetMock.defaultExpectation.expectationOrigins.origin, *m.SetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSet != nil && afterSetCounter < 1 {
		m.t.Errorf("Expected call to OrderCacheMock.Set at\n%s", m.funcSetOrigin)
	}

	if !m.SetMock.invocationsDone() && afterSetCounter > 0 {
		m.t.Errorf("Expected %d calls to OrderCacheMock.Set at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetMock.expectedInvocations), m.SetMock.expectedInvocationsOrigin, afterSetCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderCacheMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockDeleteInspect()

			m.MinimockGetInspect()

			m.MinimockSetInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderCacheMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderCacheMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockDeleteDone() &&
		m.MinimockGetDone() &&
		m.MinimockSetDone()
}
