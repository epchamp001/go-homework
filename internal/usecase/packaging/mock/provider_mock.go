// Code generated by http://github.com/gojuno/minimock (v3.4.5). DO NOT EDIT.

package mock

//go:generate minimock -i pvz-cli/internal/usecase/packaging.Provider -o provider_mock.go -n ProviderMock -p mock

import (
	"pvz-cli/internal/domain/models"
	mm_packaging "pvz-cli/internal/usecase/packaging"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProviderMock implements mm_packaging.Provider
type ProviderMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcStrategy          func(p1 models.PackageType) (p2 mm_packaging.PackagingStrategy, err error)
	funcStrategyOrigin    string
	inspectFuncStrategy   func(p1 models.PackageType)
	afterStrategyCounter  uint64
	beforeStrategyCounter uint64
	StrategyMock          mProviderMockStrategy
}

// NewProviderMock returns a mock for mm_packaging.Provider
func NewProviderMock(t minimock.Tester) *ProviderMock {
	m := &ProviderMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.StrategyMock = mProviderMockStrategy{mock: m}
	m.StrategyMock.callArgs = []*ProviderMockStrategyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProviderMockStrategy struct {
	optional           bool
	mock               *ProviderMock
	defaultExpectation *ProviderMockStrategyExpectation
	expectations       []*ProviderMockStrategyExpectation

	callArgs []*ProviderMockStrategyParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProviderMockStrategyExpectation specifies expectation struct of the Provider.Strategy
type ProviderMockStrategyExpectation struct {
	mock               *ProviderMock
	params             *ProviderMockStrategyParams
	paramPtrs          *ProviderMockStrategyParamPtrs
	expectationOrigins ProviderMockStrategyExpectationOrigins
	results            *ProviderMockStrategyResults
	returnOrigin       string
	Counter            uint64
}

// ProviderMockStrategyParams contains parameters of the Provider.Strategy
type ProviderMockStrategyParams struct {
	p1 models.PackageType
}

// ProviderMockStrategyParamPtrs contains pointers to parameters of the Provider.Strategy
type ProviderMockStrategyParamPtrs struct {
	p1 *models.PackageType
}

// ProviderMockStrategyResults contains results of the Provider.Strategy
type ProviderMockStrategyResults struct {
	p2  mm_packaging.PackagingStrategy
	err error
}

// ProviderMockStrategyOrigins contains origins of expectations of the Provider.Strategy
type ProviderMockStrategyExpectationOrigins struct {
	origin   string
	originP1 string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStrategy *mProviderMockStrategy) Optional() *mProviderMockStrategy {
	mmStrategy.optional = true
	return mmStrategy
}

// Expect sets up expected params for Provider.Strategy
func (mmStrategy *mProviderMockStrategy) Expect(p1 models.PackageType) *mProviderMockStrategy {
	if mmStrategy.mock.funcStrategy != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by Set")
	}

	if mmStrategy.defaultExpectation == nil {
		mmStrategy.defaultExpectation = &ProviderMockStrategyExpectation{}
	}

	if mmStrategy.defaultExpectation.paramPtrs != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by ExpectParams functions")
	}

	mmStrategy.defaultExpectation.params = &ProviderMockStrategyParams{p1}
	mmStrategy.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStrategy.expectations {
		if minimock.Equal(e.params, mmStrategy.defaultExpectation.params) {
			mmStrategy.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStrategy.defaultExpectation.params)
		}
	}

	return mmStrategy
}

// ExpectP1Param1 sets up expected param p1 for Provider.Strategy
func (mmStrategy *mProviderMockStrategy) ExpectP1Param1(p1 models.PackageType) *mProviderMockStrategy {
	if mmStrategy.mock.funcStrategy != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by Set")
	}

	if mmStrategy.defaultExpectation == nil {
		mmStrategy.defaultExpectation = &ProviderMockStrategyExpectation{}
	}

	if mmStrategy.defaultExpectation.params != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by Expect")
	}

	if mmStrategy.defaultExpectation.paramPtrs == nil {
		mmStrategy.defaultExpectation.paramPtrs = &ProviderMockStrategyParamPtrs{}
	}
	mmStrategy.defaultExpectation.paramPtrs.p1 = &p1
	mmStrategy.defaultExpectation.expectationOrigins.originP1 = minimock.CallerInfo(1)

	return mmStrategy
}

// Inspect accepts an inspector function that has same arguments as the Provider.Strategy
func (mmStrategy *mProviderMockStrategy) Inspect(f func(p1 models.PackageType)) *mProviderMockStrategy {
	if mmStrategy.mock.inspectFuncStrategy != nil {
		mmStrategy.mock.t.Fatalf("Inspect function is already set for ProviderMock.Strategy")
	}

	mmStrategy.mock.inspectFuncStrategy = f

	return mmStrategy
}

// Return sets up results that will be returned by Provider.Strategy
func (mmStrategy *mProviderMockStrategy) Return(p2 mm_packaging.PackagingStrategy, err error) *ProviderMock {
	if mmStrategy.mock.funcStrategy != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by Set")
	}

	if mmStrategy.defaultExpectation == nil {
		mmStrategy.defaultExpectation = &ProviderMockStrategyExpectation{mock: mmStrategy.mock}
	}
	mmStrategy.defaultExpectation.results = &ProviderMockStrategyResults{p2, err}
	mmStrategy.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStrategy.mock
}

// Set uses given function f to mock the Provider.Strategy method
func (mmStrategy *mProviderMockStrategy) Set(f func(p1 models.PackageType) (p2 mm_packaging.PackagingStrategy, err error)) *ProviderMock {
	if mmStrategy.defaultExpectation != nil {
		mmStrategy.mock.t.Fatalf("Default expectation is already set for the Provider.Strategy method")
	}

	if len(mmStrategy.expectations) > 0 {
		mmStrategy.mock.t.Fatalf("Some expectations are already set for the Provider.Strategy method")
	}

	mmStrategy.mock.funcStrategy = f
	mmStrategy.mock.funcStrategyOrigin = minimock.CallerInfo(1)
	return mmStrategy.mock
}

// When sets expectation for the Provider.Strategy which will trigger the result defined by the following
// Then helper
func (mmStrategy *mProviderMockStrategy) When(p1 models.PackageType) *ProviderMockStrategyExpectation {
	if mmStrategy.mock.funcStrategy != nil {
		mmStrategy.mock.t.Fatalf("ProviderMock.Strategy mock is already set by Set")
	}

	expectation := &ProviderMockStrategyExpectation{
		mock:               mmStrategy.mock,
		params:             &ProviderMockStrategyParams{p1},
		expectationOrigins: ProviderMockStrategyExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStrategy.expectations = append(mmStrategy.expectations, expectation)
	return expectation
}

// Then sets up Provider.Strategy return parameters for the expectation previously defined by the When method
func (e *ProviderMockStrategyExpectation) Then(p2 mm_packaging.PackagingStrategy, err error) *ProviderMock {
	e.results = &ProviderMockStrategyResults{p2, err}
	return e.mock
}

// Times sets number of times Provider.Strategy should be invoked
func (mmStrategy *mProviderMockStrategy) Times(n uint64) *mProviderMockStrategy {
	if n == 0 {
		mmStrategy.mock.t.Fatalf("Times of ProviderMock.Strategy mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStrategy.expectedInvocations, n)
	mmStrategy.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStrategy
}

func (mmStrategy *mProviderMockStrategy) invocationsDone() bool {
	if len(mmStrategy.expectations) == 0 && mmStrategy.defaultExpectation == nil && mmStrategy.mock.funcStrategy == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStrategy.mock.afterStrategyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStrategy.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Strategy implements mm_packaging.Provider
func (mmStrategy *ProviderMock) Strategy(p1 models.PackageType) (p2 mm_packaging.PackagingStrategy, err error) {
	mm_atomic.AddUint64(&mmStrategy.beforeStrategyCounter, 1)
	defer mm_atomic.AddUint64(&mmStrategy.afterStrategyCounter, 1)

	mmStrategy.t.Helper()

	if mmStrategy.inspectFuncStrategy != nil {
		mmStrategy.inspectFuncStrategy(p1)
	}

	mm_params := ProviderMockStrategyParams{p1}

	// Record call args
	mmStrategy.StrategyMock.mutex.Lock()
	mmStrategy.StrategyMock.callArgs = append(mmStrategy.StrategyMock.callArgs, &mm_params)
	mmStrategy.StrategyMock.mutex.Unlock()

	for _, e := range mmStrategy.StrategyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.p2, e.results.err
		}
	}

	if mmStrategy.StrategyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStrategy.StrategyMock.defaultExpectation.Counter, 1)
		mm_want := mmStrategy.StrategyMock.defaultExpectation.params
		mm_want_ptrs := mmStrategy.StrategyMock.defaultExpectation.paramPtrs

		mm_got := ProviderMockStrategyParams{p1}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.p1 != nil && !minimock.Equal(*mm_want_ptrs.p1, mm_got.p1) {
				mmStrategy.t.Errorf("ProviderMock.Strategy got unexpected parameter p1, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStrategy.StrategyMock.defaultExpectation.expectationOrigins.originP1, *mm_want_ptrs.p1, mm_got.p1, minimock.Diff(*mm_want_ptrs.p1, mm_got.p1))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStrategy.t.Errorf("ProviderMock.Strategy got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStrategy.StrategyMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStrategy.StrategyMock.defaultExpectation.results
		if mm_results == nil {
			mmStrategy.t.Fatal("No results are set for the ProviderMock.Strategy")
		}
		return (*mm_results).p2, (*mm_results).err
	}
	if mmStrategy.funcStrategy != nil {
		return mmStrategy.funcStrategy(p1)
	}
	mmStrategy.t.Fatalf("Unexpected call to ProviderMock.Strategy. %v", p1)
	return
}

// StrategyAfterCounter returns a count of finished ProviderMock.Strategy invocations
func (mmStrategy *ProviderMock) StrategyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStrategy.afterStrategyCounter)
}

// StrategyBeforeCounter returns a count of ProviderMock.Strategy invocations
func (mmStrategy *ProviderMock) StrategyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStrategy.beforeStrategyCounter)
}

// Calls returns a list of arguments used in each call to ProviderMock.Strategy.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStrategy *mProviderMockStrategy) Calls() []*ProviderMockStrategyParams {
	mmStrategy.mutex.RLock()

	argCopy := make([]*ProviderMockStrategyParams, len(mmStrategy.callArgs))
	copy(argCopy, mmStrategy.callArgs)

	mmStrategy.mutex.RUnlock()

	return argCopy
}

// MinimockStrategyDone returns true if the count of the Strategy invocations corresponds
// the number of defined expectations
func (m *ProviderMock) MinimockStrategyDone() bool {
	if m.StrategyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StrategyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StrategyMock.invocationsDone()
}

// MinimockStrategyInspect logs each unmet expectation
func (m *ProviderMock) MinimockStrategyInspect() {
	for _, e := range m.StrategyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProviderMock.Strategy at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStrategyCounter := mm_atomic.LoadUint64(&m.afterStrategyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StrategyMock.defaultExpectation != nil && afterStrategyCounter < 1 {
		if m.StrategyMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProviderMock.Strategy at\n%s", m.StrategyMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProviderMock.Strategy at\n%s with params: %#v", m.StrategyMock.defaultExpectation.expectationOrigins.origin, *m.StrategyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStrategy != nil && afterStrategyCounter < 1 {
		m.t.Errorf("Expected call to ProviderMock.Strategy at\n%s", m.funcStrategyOrigin)
	}

	if !m.StrategyMock.invocationsDone() && afterStrategyCounter > 0 {
		m.t.Errorf("Expected %d calls to ProviderMock.Strategy at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StrategyMock.expectedInvocations), m.StrategyMock.expectedInvocationsOrigin, afterStrategyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProviderMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockStrategyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProviderMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProviderMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockStrategyDone()
}
